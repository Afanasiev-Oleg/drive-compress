name: Drive Compress

on:
  repository_dispatch:
    types: [drive_compress]
  # опционально для ручного прогона: можно передать JSON массив files[]
  workflow_dispatch:
    inputs:
      files:
        description: 'JSON array of files[] (ручной тест)'
        required: false
        default: '[]'

jobs:
  compress:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        file: ${{ fromJson( github.event_name == 'workflow_dispatch' && inputs.files != '' && inputs.files != '[]'
                            ? inputs.files
                            : toJson(github.event.client_payload.files) ) }}

    steps:
      - uses: actions/checkout@v4

      - name: Validate payload
        run: |
          echo "Incoming matrix.file: ${{ toJson(matrix.file) }}"
          test -n "${{ matrix.file.fileId }}" || { echo "client_payload.files[].fileId пустой"; exit 1; }

      - name: Install ffmpeg
        run: sudo apt-get update && sudo apt-get install -y ffmpeg

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: pip install google-api-python-client google-auth google-auth-httplib2 google-auth-oauthlib

      - name: Write SA JSON
        run: echo "${{ secrets.GCP_SA_JSON }}" > sa.json

      - name: Export ENV for current file
        run: |
          {
            echo "FILE_ID=${{ matrix.file.fileId }}";
            echo "ACTION=${{ matrix.file.action }}";
            echo "EST_NEW_SIZE_MB=${{ matrix.file.estNewSizeMB }}";
            echo "RECOMMEND=${{ matrix.file.recommend }}";
            printf "WHY<<'EOF'\n%s\nEOF\n" "${{ matrix.file.why }}";
          } >> "$GITHUB_ENV"

      - name: Compress & upload new version
        run: |
          python - << 'PY'
          import os, io, shlex, subprocess, tempfile, sys
          from google.oauth2 import service_account
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaIoBaseDownload, MediaFileUpload

          SA_PATH='sa.json'
          SCOPES=['https://www.googleapis.com/auth/drive']
          FILE_ID=os.environ.get('FILE_ID')
          assert FILE_ID, "FILE_ID missing"

          creds = service_account.Credentials.from_service_account_file(SA_PATH, scopes=SCOPES)
          svc = build('drive','v3',credentials=creds, cache_discovery=False)

          with tempfile.TemporaryDirectory() as td:
            src = os.path.join(td,'in')
            dst = os.path.join(td,'out.mp4')

            # 1) download original
            req = svc.files().get_media(fileId=FILE_ID)
            with open(src,'wb') as fh:
              dl = MediaIoBaseDownload(fh, req)
              done = False
              while not done:
                _, done = dl.next_chunk()

            # 2) ffmpeg → HEVC 720p/30 CRF=31
            vf = 'scale=min(iw\\,1280):-2,fps=30'
            cmd = f'ffmpeg -y -i {shlex.quote(src)} -vf "{vf}" ' \
                  f'-c:v libx265 -preset slow -crf 31 -pix_fmt yuv420p -tag:v hvc1 ' \
                  f'-c:a aac -ac 1 -b:a 48k -ar 44100 -movflags +faststart {shlex.quote(dst)}'
            print("RUN:", cmd, flush=True)
            if subprocess.run(cmd, shell=True).returncode != 0:
              sys.exit("ffmpeg failed")

            # 3) upload as NEW VERSION (same fileId/link)
            media = MediaFileUpload(dst, mimetype='video/mp4', resumable=True)
            svc.files().update(fileId=FILE_ID, media_body=media).execute()
            print("Updated file:", FILE_ID)
          PY
